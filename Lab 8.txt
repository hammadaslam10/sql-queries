select * from production.categories;
select * from production.products;

select category_name,avg(list_price) as avg_product_price 
from production.products as p
inner join production.categories as c
on c.category_id = p.category_id
group by category_name
order by category_name;

select * from production.brands;
--having clause is used for condition of aggregate function
--srf (single row function) for e.g avg,max,mix,count etc and mrf (multiple rows function)

select brand_name, avg(list_price) as avg_product_price
from production.products as p
inner join production.brands as c on c.brand_id = p.brand_id
group by brand_name
having avg(list_price) > 500
order by avg_product_price;

select brand_name, sum(list_price) as avg_product_price
from production.products as p
inner join production.brands as c on c.brand_id = p.brand_id
group by brand_name
having sum(list_price) > 500
order by avg_product_price;

select customer_id, Year (order_date) order_year, count(order_id) as order_placed
from sales.orders
where customer_id In (1,2)
group by customer_id, year(order_date) --group up eliminates repetition
order by customer_id;

select city,count(customer_id) as customer_count
from sales.customers
group by city
order by city
--for exam: length,min,max,avg,count,sum,year

select city,count(customer_id) as customer_count
from sales.customers
where city like 'Albany'
group by city
order by city;

select brand_name, min(list_price) as min_price, max(list_price) as max_price
from production.products as p inner join production.brands b on b.brand_id = p.brand_id
where model_year = 2018
group by brand_name
order by brand_name;